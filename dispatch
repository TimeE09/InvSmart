<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Dispatch Items - SCAN System</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background: #f8f8f8;
      height: 100vh;
      overflow: hidden;
    }
    .header {
      background: #e05656;
      height: 60px;
      display: flex;
      align-items: center;
      padding: 0 20px;
      font-size: 24px;
      color: white;
      font-weight: bold;
      font-style: italic;
      position: fixed;
      width: 100%;
      top: 0;
      z-index: 10;
      box-shadow: 0 2px 6px rgba(0,0,0,0.2);
    }
    .menu-toggle {
      font-size: 24px;
      margin-right: 20px;
      cursor: pointer;
    }
    .sidebar {
      position: fixed;
      top: 60px;
      left: 0;
      width: 220px;
      height: calc(100vh - 60px);
      background: white;
      box-shadow: 2px 0 6px rgba(0,0,0,0.1);
      transition: width 0.3s;
      overflow-y: auto;
    }
    .sidebar.collapsed { width: 70px; }
    .sidebar a {
      display: flex;
      align-items: center;
      padding: 14px 20px;
      font-weight: bold;
      color: #333;
      text-decoration: none;
    }
    .sidebar a:hover { background: #f0f0f0; }
    .sidebar a i {
      margin-right: 10px;
      width: 24px;
      text-align: center;
    }
    .sidebar.collapsed a span { display: none; }
    .logout-btn {
      margin: 20px auto;
      display: block;
      background: #e05656;
      color: white;
      padding: 12px;
      width: 90%;
      border-radius: 8px;
      border: none;
      font-weight: bold;
      cursor: pointer;
    }
    .main {
      margin-left: 220px;
      margin-top: 60px;
      padding: 20px;
      transition: margin-left 0.3s;
      height: calc(100vh - 60px);
      overflow-y: auto;
    }
    .sidebar.collapsed + .main { margin-left: 70px; }
    .logo {
      font-size: 28px;
      text-align: center;
      color: #e05656;
      font-weight: bold;
    }
    .sub-logo {
      font-style: italic;
      text-align: center;
      color: #e05656;
      margin-bottom: 20px;
    }
    .btn-top {
      display: block;
      margin: 0 auto 20px;
      background: #e67e22;
      color: white;
      padding: 10px 20px;
      font-weight: bold;
      border: none;
      border-radius: 6px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    form {
      max-width: 600px;
      margin: auto;
    }
    .form-input, select {
      width: 100%;
      padding: 12px;
      margin: 8px 0;
      border: 1px solid #ccc;
      border-radius: 6px;
      font-size: 14px;
    }
    .save-btn {
      width: 100%;
      background: #ec2c2c;
      color: white;
      padding: 12px;
      border: none;
      border-radius: 6px;
      font-weight: bold;
      font-size: 16px;
      margin-top: 20px;
      cursor: pointer;
    }
    .action-buttons {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-top: 30px;
    }
    .clear-btn, .export-btn {
      flex: 1;
      max-width: 200px;
      padding: 10px 20px;
      border-radius: 6px;
      font-weight: bold;
      border: none;
      cursor: pointer;
    }
    .clear-btn { background: #f39c12; color: white; }
    .export-btn { background: #3498db; color: white; }
    .table-wrapper {
      margin-top: 20px;
      background: white;
      padding: 10px;
      border-radius: 8px;
      overflow-x: auto;
      box-shadow: 0 2px 6px rgba(0,0,0,0.1);
    }
    table {
      width: 100%;
      min-width: 900px;
      border-collapse: collapse;
      overflow: hidden;
      border-radius: 12px;
      background: white;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    thead {
      background: #ec2c2c;
      color: white;
    }
    thead th, tbody td {
      padding: 12px;
      text-align: center;
      border: 1px solid #ddd;
    }
    tbody tr:hover { background: #ffe5d0; }
    #toast {
      position: fixed;
      bottom: 30px;
      right: 30px;
      background: #e67e22;
      color: white;
      padding: 14px 20px;
      border-radius: 8px;
      box-shadow: 0 5px 10px rgba(0,0,0,0.2);
      font-weight: bold;
      z-index: 9999;
      display: none;
      opacity: 1;
    }
    .modal {
      position: fixed;
      top: 0; left: 0; right: 0; bottom: 0;
      background: rgba(0,0,0,0.5);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }
    .modal-content {
      background: white;
      padding: 20px;
      border-radius: 10px;
      width: 90%;
      max-width: 500px;
      animation: fadeIn 0.3s ease-out;
    }

.modal-buttons {
  display: flex;
  justify-content: center;
  gap: 20px;
}

.modal-buttons button {
  flex: 1;
  padding: 14px;
  font-size: 16px;
  font-weight: bold;
  border-radius: 8px;
  border: none;
  cursor: pointer;
  transition: background 0.3s, transform 0.2s;
}

.save-modal {
  background: #2ecc71;
  color: white;
}

.save-modal:hover {
  background: #27ae60;
  transform: translateY(-2px);
}

.cancel-modal {
  background: #e74c3c;
  color: white;
}

.cancel-modal:hover {
  background: #c0392b;
  transform: translateY(-2px);
}
    @keyframes fadeIn { from { opacity: 0; transform: translateY(-20px); } to { opacity: 1; transform: translateY(0); } }
    @keyframes fadeOut { from { opacity: 1; transform: translateY(0); } to { opacity: 0; transform: translateY(-20px); } }
    
.pagination {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  gap: 8px;
  flex-wrap: wrap;
}

.pagination button {
  padding: 8px 14px;
  font-size: 14px;
  border: none;
  background: #f0f0f0;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.3s, transform 0.2s;
}

.pagination button:hover {
  background: #e67e22;
  color: white;
  transform: translateY(-2px);
}

.pagination button:disabled {
  background: #e67e22;
  color: white;
  font-weight: bold;
  cursor: default;
}
  </style>
</head>
<body>
  <style>
    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      margin-top: 20px;
      gap: 8px;
      flex-wrap: wrap;
    }
    
    .pagination button {
      padding: 8px 14px;
      font-size: 14px;
      border: none;
      background: #f0f0f0;
      border-radius: 6px;
      cursor: pointer;
      transition: background 0.3s, transform 0.2s;
    }
    
    .pagination button:hover {
      background: #e67e22;
      color: white;
      transform: translateY(-2px);
    }
    
    .pagination button:disabled {
      background: #e67e22;
      color: white;
      font-weight: bold;
      cursor: default;
    }
    </style>
    
  <!-- Header -->
  <div class="header">
    <div class="menu-toggle" onclick="toggleSidebar()"><i class="fas fa-bars"></i></div> SCAN
  </div>
  
  <!-- Sidebar -->
  <div class="sidebar" id="sidebar">
    <a href="ReceiveItems.html"><i class="fas fa-box"></i><span>Receive Items</span></a>
    <a href="dispatch.html"><i class="fas fa-truck"></i><span>Dispatch Items</span></a>
    <a href="reports.html"><i class="fas fa-chart-bar"></i><span>Reports</span></a>
    <a href="barcode.html"><i class="fas fa-barcode"></i><span>Scan Barcode</span></a>
    <a href="#"><i class="fas fa-cogs"></i><span>Inventory</span></a>
    <a href="#"><i class="fas fa-user"></i><span>Users</span></a>
    <button class="logout-btn" onclick="logout()">Logout</button>
  </div>
  
  <!-- Main Content -->
  <div class="main" id="main">
    <button class="btn-top">üöö Dispatch Items</button>
  
    <!-- Form -->
    <form id="dispatchForm" onsubmit="saveDispatch(); return false;">
      <input id="itemName" class="form-input" type="text" placeholder="Item Name" autocomplete="off" oninput="showSuggestions()" required style="width: 100%;">
      <div id="suggestions" style="position:relative;">
  
      <input id="quantity" class="form-input" type="number" placeholder="Quantity" required style="width: 100%;">
      
      <select id="location" class="form-input" rrequired style="width: 626px;" ></select >
      <select id="receivingDept" class="form-input" required style="width: 626px;">
        <option value="">Receiving Department</option>
        <option>Production</option>
        <option>Maintenance</option>
        <option>Administration</option>
      </select>
      
      <input id="dispatchDate" class="form-input" type="date" required>
      <input id="handledBy" class="form-input" type="text" placeholder="Handled By" required>
      <input id="remarks" class="form-input" type="text" placeholder="Remarks (optional)">
      
      <button type="submit" class="save-btn">Save</button>
    </form>
  
    <!-- Action Buttons -->
    <div class="action-buttons">
      <button class="clear-btn" onclick="clearAll()">üóëÔ∏è Clear All</button>
      <button class="export-btn" onclick="exportToExcel()">üìÑ Export Excel</button>
    </div>
  
    <!-- ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ -->
    <div style="text-align:center;margin-top:20px;">
      <input type="text" id="searchInput" placeholder="üîé Search Item Name..." style="padding:10px;width:300px;border:1px solid #ccc;border-radius:6px;">
    </div>
  
    <!-- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á -->
    <div class="table-wrapper">
      <div id="itemsTable" style="padding-bottom: 50px;"></div>
    </div>
  </div>
  
  <!-- Edit Modal -->
<div class="modal" id="editModal">
  <div class="modal-content">
    <h3>Edit Dispatch Item</h3>
    <input id="editItemName" class="form-input" type="text" style="width: 90%;">
    <input id="editQuantity" class="form-input" type="number" style="width: 90%;">
    <input id="editLocation" class="form-input" type="text" style="width: 90%;">
    <select id="editReceivingDept" class="form-input" style="width: 95%;">
      <option>Production</option>
      <option>Maintenance</option>
      <option>Administration</option>
    </select>
    <input id="editDispatchDate" class="form-input" type="date" style="width: 90%;">
    <input id="editHandledBy" class="form-input" type="text" style="width: 90%;">
    <input id="editRemarks" class="form-input" type="text" style="width: 90%;">
    
    <!-- ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ -->
    <div class="modal-buttons">
      <button class="save-modal" onclick="saveEdit()">Save</button>
      <button class="cancel-modal" onclick="closeEditModal()">Cancel</button>
    </div>
  </div>
</div>

  
  <!-- Delete Modal -->
  <div class="modal" id="deleteModal">
    <div class="modal-content">
      <h3>Confirm Delete</h3>
      <p style="text-align: center; font-size: 16px;">Are you sure you want to delete this item?</p>
      <div class="modal-buttons">
        <button class="save-modal" onclick="confirmDelete()">Yes, Delete</button>
        <button class="cancel-modal" onclick="closeDeleteModal()">Cancel</button>
      </div>
    </div>
  </div>
  
  <!-- Toast -->
  <div id="toast">Saved Successfully!</div>
  <script>
    let dispatchItems = JSON.parse(localStorage.getItem('dispatchItems')) || [];
    let receiveItems = JSON.parse(localStorage.getItem('receiveItems')) || [];
    let inventory = {};
    let editIndex = -1;
    let deleteIndex = -1;
    let currentPage = 1;
    const itemsPerPage = 5;
    function generatePagination(totalPages) {
  if (totalPages <= 1) return '';

  let paginationHTML = '<div class="pagination">';
  if (currentPage > 1) {
    paginationHTML += `<button onclick="changePage(${currentPage - 1})">‚¨ÖÔ∏è Prev</button>`;
  }
  for (let i = 1; i <= totalPages; i++) {
    if (i === currentPage) {
      paginationHTML += `<button disabled>${i}</button>`;
    } else {
      paginationHTML += `<button onclick="changePage(${i})">${i}</button>`;
    }
  }
  if (currentPage < totalPages) {
    paginationHTML += `<button onclick="changePage(${currentPage + 1})">Next ‚û°Ô∏è</button>`;
  }
  paginationHTML += '</div>';
  return paginationHTML;
}

    // Sidebar toggle
    function toggleSidebar() {
      document.getElementById('sidebar').classList.toggle('collapsed');
      document.getElementById('main').classList.toggle('collapsed');
    }
    
    // Logout
    function logout() {
      if (confirm('Logout now?')) window.location.href = "login.html";
    }
    
    // Toast
    function showToast(message = "Saved Successfully!") {
      const toast = document.getElementById('toast');
      toast.textContent = message;
      toast.style.display = 'block';
      toast.style.opacity = '1';
      setTimeout(() => {
        toast.style.opacity = '0';
        setTimeout(() => { toast.style.display = 'none'; }, 500);
      }, 2000);
    }
    
    // Load inventory
    function loadInventory() {
      inventory = {};
      receiveItems.forEach(item => {
        const name = item.itemName.trim();
        if (!inventory[name]) inventory[name] = 0;
        inventory[name] += parseInt(item.quantity);
      });
      dispatchItems.forEach(item => {
        const name = item.itemName.trim();
        if (!inventory[name]) inventory[name] = 0;
        inventory[name] -= parseInt(item.quantity);
      });
    
      const locationSelect = document.getElementById('location');
      locationSelect.innerHTML = '<option value="">Select Location</option>';
      [...new Set(receiveItems.map(i => i.storageLocation))].forEach(loc => {
        const option = document.createElement('option');
        option.value = loc;
        option.textContent = loc;
        locationSelect.appendChild(option);
      });
    }
    
    // Save Dispatch
    function saveDispatch() {
      const itemName = document.getElementById('itemName').value.trim();
      const quantity = parseInt(document.getElementById('quantity').value);
      const location = document.getElementById('location').value.trim();
      const receivingDept = document.getElementById('receivingDept').value;
      const dispatchDate = document.getElementById('dispatchDate').value;
      const handledBy = document.getElementById('handledBy').value.trim();
      const remarks = document.getElementById('remarks').value.trim();
    
      if (!itemName || isNaN(quantity) || quantity <= 0 || !location || !receivingDept || !dispatchDate || !handledBy) {
        alert('Please fill all fields properly.');
        return;
      }
      if (inventory[itemName] === undefined || inventory[itemName] < quantity) {
        alert(`Not enough stock! Remaining: ${inventory[itemName] || 0}`);
        return;
      }
    
      dispatchItems.push({ itemName, quantity, location, receivingDept, dispatchDate, handledBy, remarks });
      localStorage.setItem('dispatchItems', JSON.stringify(dispatchItems));
      document.getElementById('dispatchForm').reset();
      currentPage = Math.ceil(dispatchItems.length / itemsPerPage);
      renderTable();
      showToast();
      loadInventory();
    }
    
    // Render Table
    function renderTable() {
  const table = document.getElementById('itemsTable');
  const search = document.getElementById('searchInput').value.toLowerCase();
  const filteredItems = dispatchItems.filter(item => item.itemName.toLowerCase().includes(search));

  if (filteredItems.length === 0) {
    table.innerHTML = '<p>No matching items found</p>';
    return;
  }

  const start = (currentPage - 1) * itemsPerPage;
  const end = start + itemsPerPage;
  const pageItems = filteredItems.slice(start, end);

  let html = '<table><thead><tr><th>Item</th><th>Qty</th><th>Location</th><th>Dept</th><th>Date</th><th>Handled By</th><th>Remarks</th><th>Actions</th></tr></thead><tbody>';
  pageItems.forEach((item, i) => {
    html += `<tr>
      <td>${item.itemName}</td>
      <td>${item.quantity}</td>
      <td>${item.location}</td>
      <td>${item.receivingDept}</td>
      <td>${item.dispatchDate}</td>
      <td>${item.handledBy}</td>
      <td>${item.remarks}</td>
      <td>
        <button onclick="openEditModal(${dispatchItems.indexOf(item)})" style="background:orange;border:none;padding:6px 8px;border-radius:4px;cursor:pointer;color:white;">‚úèÔ∏è</button> 
        <button onclick="openDeleteModal(${dispatchItems.indexOf(item)})" style="background:red;border:none;padding:6px 8px;border-radius:4px;cursor:pointer;color:white;">üóëÔ∏è</button>
      </td>
    </tr>`;
  });
  html += '</tbody></table>';

  const totalPages = Math.ceil(filteredItems.length / itemsPerPage);
  html += generatePagination(totalPages);   // ‚úÖ ‡∏ï‡πà‡∏≠ Pagination ‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏î‡πâ‡∏ß‡∏¢

  table.innerHTML = html;
}

    
    // Pagination
    function changePage(page) {
      currentPage = page;
      renderTable();
    }
    
    // Open/Close Modal
    function openEditModal(index) {
      editIndex = index;
      const item = dispatchItems[index];
      document.getElementById('editItemName').value = item.itemName;
      document.getElementById('editQuantity').value = item.quantity;
      document.getElementById('editLocation').value = item.location;
      document.getElementById('editReceivingDept').value = item.receivingDept;
      document.getElementById('editDispatchDate').value = item.dispatchDate;
      document.getElementById('editHandledBy').value = item.handledBy;
      document.getElementById('editRemarks').value = item.remarks;
      document.getElementById('editModal').style.display = 'flex';
    }
    
    function saveEdit() {
      dispatchItems[editIndex] = {
        itemName: document.getElementById('editItemName').value.trim(),
        quantity: parseInt(document.getElementById('editQuantity').value),
        location: document.getElementById('editLocation').value.trim(),
        receivingDept: document.getElementById('editReceivingDept').value,
        dispatchDate: document.getElementById('editDispatchDate').value,
        handledBy: document.getElementById('editHandledBy').value.trim(),
        remarks: document.getElementById('editRemarks').value.trim()
      };
      localStorage.setItem('dispatchItems', JSON.stringify(dispatchItems));
      closeEditModal();
      renderTable();
      showToast('Updated Successfully!');
    }
    
    function closeEditModal() {
      document.getElementById('editModal').style.display = 'none';
    }
    
    function openDeleteModal(index) {
      deleteIndex = index;
      document.getElementById('deleteModal').style.display = 'flex';
    }
    
    function confirmDelete() {
      dispatchItems.splice(deleteIndex, 1);
      localStorage.setItem('dispatchItems', JSON.stringify(dispatchItems));
      closeDeleteModal();
      renderTable();
      showToast('Deleted Successfully!');
    }
    
    function closeDeleteModal() {
      document.getElementById('deleteModal').style.display = 'none';
    }
    
    // Clear All
    function clearAll() {
      if (confirm('Clear all dispatch data?')) {
        dispatchItems = [];
        localStorage.removeItem('dispatchItems');
        renderTable();
      }
    }
    
    // Export to Excel
    function exportToExcel() {
      if (dispatchItems.length === 0) return alert('No data to export');
      const ws = XLSX.utils.json_to_sheet(dispatchItems);
      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, 'DispatchItems');
      XLSX.writeFile(wb, 'Dispatch_Items.xlsx');
    }
    
    // Search filter
    document.getElementById('searchInput').addEventListener('input', function() {
      currentPage = 1;
      renderTable();
    });
    
    // Auto Suggestion
    function showSuggestions() {
      const input = document.getElementById('itemName').value.toLowerCase();
      const suggestionDiv = document.getElementById('suggestions');
      suggestionDiv.innerHTML = '';
      if (!input) return;
    
      const matches = receiveItems.filter(item => item.itemName.toLowerCase().includes(input));
      matches.forEach(item => {
        const div = document.createElement('div');
        div.textContent = item.itemName;
        div.style.cursor = 'pointer';
        div.style.padding = '8px';
        div.style.background = '#fff';
        div.style.borderBottom = '1px solid #ccc';
        div.onclick = () => {
          document.getElementById('itemName').value = item.itemName;
          document.getElementById('location').value = item.storageLocation;
          suggestionDiv.innerHTML = '';
        };
        suggestionDiv.appendChild(div);
      });
    }
    
    // Init
    window.onload = () => {
      loadInventory();
      renderTable();
    };
    </script>
    
    </body>
    </html>
      
