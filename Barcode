<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Barcode Generator - SCAN</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
    />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js"></script>

    <style>
      body {
        margin: 0;
        font-family: Arial, sans-serif;
        background: #f0f0f0;
        height: 100vh;
        overflow: hidden;
      }
      .header {
        background: #555;
        height: 60px;
        display: flex;
        align-items: center;
        padding: 0 20px;
        font-size: 24px;
        color: white;
        font-weight: bold;
        font-style: italic;
        position: fixed;
        width: 100%;
        top: 0;
        z-index: 10;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
      }
      .menu-toggle {
        font-size: 24px;
        margin-right: 20px;
        cursor: pointer;
      }
      .sidebar {
        position: fixed;
        top: 60px;
        left: 0;
        width: 220px;
        height: calc(100vh - 60px);
        background: #fff;
        box-shadow: 2px 0 6px rgba(0, 0, 0, 0.1);
        overflow-y: auto;
        transition: width 0.3s;
      }
      .sidebar.collapsed {
        width: 70px;
      }
      .sidebar a {
        display: flex;
        align-items: center;
        padding: 14px 20px;
        font-weight: bold;
        color: #333;
        text-decoration: none;
      }
      .sidebar a:hover {
        background: #f0f0f0;
      }
      .sidebar a i {
        margin-right: 10px;
        width: 24px;
        text-align: center;
      }
      .sidebar.collapsed a span {
        display: none;
      }
      .logout-btn {
        margin: 20px auto;
        display: block;
        background: #e05656;
        color: white;
        padding: 12px;
        width: 90%;
        border-radius: 8px;
        border: none;
        font-weight: bold;
        cursor: pointer;
      }
      .main {
        margin-left: 220px;
        margin-top: 60px;
        padding: 20px;
        height: calc(100vh - 60px);
        overflow-y: auto;
        transition: margin-left 0.3s;
      }
      .sidebar.collapsed + .main {
        margin-left: 70px;
      }
      .container {
        max-width: 1200px;
        margin: 30px auto;
        background: white;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      }
      h2 {
        color: #555;
        margin-top: 0;
      }
      .barcode-item {
        margin: 15px 0;
        text-align: center;
      }
      #previewText {
        margin-top: 20px;
        background: #fff;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 8px;
        max-height: 300px;
        overflow-y: auto;
      }
      #toast {
        position: fixed;
        bottom: 30px;
        right: 30px;
        background: #3498db;
        color: white;
        padding: 14px 20px;
        border-radius: 8px;
        font-weight: bold;
        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
        z-index: 9999;
        display: none;
        opacity: 1;
      }
      button {
        background: #3498db;
        color: white;
        padding: 10px 20px;
        font-weight: bold;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        margin-right: 10px;
        margin-top: 10px;
      }
      button:hover {
        background: #217dbb;
      }
    </style>
  </head>

  <body>
    <div class="header">
      <div class="menu-toggle" onclick="toggleSidebar()">
        <i class="fas fa-bars"></i>
      </div>
      <span style="font-weight: bold; font-size: 24px">SCAN</span>
    </div>

    <div class="sidebar" id="sidebar">
      <a href="ReceiveItems.html"
        ><i class="fas fa-box"></i><span>Receive Items</span></a
      >
      <a href="dispatch.html"
        ><i class="fas fa-truck"></i><span>Dispatch Items</span></a
      >
      <a href="reports.html"
        ><i class="fas fa-chart-bar"></i><span>Reports</span></a
      >
      <a href="barcode.html"
        ><i class="fas fa-barcode"></i><span>Scan Barcode</span></a
      >
      <a href="history.html"
        ><i class="fas fa-history"></i><span>History</span></a
      >
      <a href="upload.html"
        ><i class="fas fa-chart-bar"></i><span>Upload</span></a
      >
      <a href="inventory.html"
        ><i class="fas fa-cogs"></i><span>Manage Inventory</span></a
      >
      <a href="users.html"
        ><i class="fas fa-user"></i><span>User Management</span></a
      >
      <button class="logout-btn" onclick="logout()">
        <i class="fas fa-sign-out-alt"></i> <span>Logout</span>
      </button>
    </div>

    <div class="main" id="main">
      <div class="container">
        <h2>üì§ Upload Excel & Generate Barcode</h2>

        <input type="file" id="fileInput" accept=".xlsx" />
        <div
          id="columnSelector"
          style="margin-top: 20px; margin-bottom: 20px; display: none"
        >
          <h3>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á Barcode</h3>
          <div id="checkboxContainer"></div>
        </div>
        <div id="previewText"></div>

        <button id="generateBtn" disabled onclick="generateBarcodes()">
          Generate Barcodes
        </button>
        <button id="printBtn" style="display: none" onclick="printBarcodes()">
          Print Barcodes
        </button>
        <button id="resetBtn" onclick="resetRunningNumber()">
          Reset Running Number
        </button>
        <div style="margin-top: 10px; font-weight: bold">
          Running Number ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:
          <span id="currentRunningNumber">‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</span>
        </div>
        <div id="preview"></div>
      </div>
    </div>

    <div id="toast"></div>

    <script>
      function toggleSidebar() {
        document.getElementById("sidebar").classList.toggle("collapsed");
        document.getElementById("main").classList.toggle("collapsed");
      }

      function logout() {
        if (confirm("Are you sure you want to logout?")) {
          window.location.href = "login.html"; // ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤ Login ‡∏à‡∏£‡∏¥‡∏á
        }
      }

      function showToast(message = "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!") {
        const toast = document.getElementById("toast");
        toast.textContent = message;
        toast.style.display = "block";
        toast.style.opacity = "1";
        setTimeout(() => {
          toast.style.opacity = "0";
          setTimeout(() => {
            toast.style.display = "none";
          }, 500);
        }, 2000);
      }

      let excelData = [];
      let generatedBarcodes = [];

      document
        .getElementById("fileInput")
        .addEventListener("change", function (e) {
          const reader = new FileReader();
          reader.onload = function (event) {
            const data = new Uint8Array(event.target.result);
            const workbook = XLSX.read(data, { type: "array" });
            const sheet = workbook.Sheets[workbook.SheetNames[0]];
            excelData = XLSX.utils.sheet_to_json(sheet, { defval: "" });

            if (excelData.length > 0) {
              const firstRow = excelData[0];
              const container = document.getElementById("checkboxContainer");
              container.innerHTML = "";
              Object.keys(firstRow).forEach((col) => {
                const checkbox = document.createElement("input");
                checkbox.type = "checkbox";
                checkbox.value = col;
                checkbox.id = "col-" + col;
                checkbox.checked = true;
                checkbox.addEventListener("change", updatePreviewText);
                const label = document.createElement("label");
                label.htmlFor = "col-" + col;
                label.textContent = col;
                const div = document.createElement("div");
                div.appendChild(checkbox);
                div.appendChild(label);
                container.appendChild(div);
              });
              document.getElementById("columnSelector").style.display = "block";
              updatePreviewText();
            }

            document.getElementById("generateBtn").disabled = false;
            showToast("‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
          };
          reader.readAsArrayBuffer(this.files[0]);
        });

      function updatePreviewText() {
        if (!excelData.length) return;

        const selectedColumns = Array.from(
          document.querySelectorAll("#checkboxContainer input:checked")
        ).map((cb) => cb.value);
        const preview = document.getElementById("previewText");
        preview.innerHTML = "";

        excelData.forEach((row, index) => {
          const combinedText = selectedColumns
            .map((col) => (row[col] ? String(row[col]).trim() : ""))
            .filter((val) => val)
            .join(" ")
            .trim();

          if (combinedText) {
            const p = document.createElement("div");
            p.textContent = `${index + 1}. ${combinedText}`;
            p.style.padding = "4px 0";
            preview.appendChild(p);
          }
        });
      }

      function generateBarcodes() {
        if (!excelData.length) return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô!");

        let runningNumber =
          parseInt(localStorage.getItem("currentRunningNumber")) || 1;
        const preview = document.getElementById("preview");
        preview.innerHTML = "";
        generatedBarcodes = [];

        const selectedColumns = Array.from(
          document.querySelectorAll("#checkboxContainer input:checked")
        ).map((cb) => cb.value);

        excelData.forEach((row) => {
          const combinedText = selectedColumns
            .map((col) => (row[col] ? String(row[col]).trim() : ""))
            .filter((val) => val)
            .join(" ")
            .trim();

          if (!combinedText) return;

          const runningNumberStr = runningNumber.toString().padStart(6, "0");
          const finalBarcode = `${combinedText} ${runningNumberStr}`;

          const div = document.createElement("div");
          div.className = "barcode-item";
          const svg = document.createElement("svg");
          JsBarcode(svg, finalBarcode, {
            format: "CODE128",
            width: 2,
            height: 50,
            displayValue: true,
          });
          div.appendChild(svg);
          preview.appendChild(div);

          generatedBarcodes.push(finalBarcode);
          runningNumber++;
        });

        localStorage.setItem("currentRunningNumber", runningNumber);
        showToast("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß!");
        document.getElementById("printBtn").style.display = "inline-block";
      }

      function printBarcodes() {
        if (!generatedBarcodes.length) {
          alert("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ Generate Barcode ‡∏Ñ‡∏£‡∏±‡∏ö");
          return;
        }

        const tempDiv = document.createElement("div");
        tempDiv.style.padding = "20px";
        tempDiv.style.textAlign = "center";

        generatedBarcodes.forEach((text) => {
          const canvas = document.createElement("canvas");
          JsBarcode(canvas, text, {
            format: "CODE128",
            width: 2,
            height: 50,
            displayValue: true,
          });

          const img = new Image();
          img.src = canvas.toDataURL("image/png");
          img.style.margin = "20px 0";
          img.style.width = "300px";
          tempDiv.appendChild(img);
        });

        const w = window.open("", "_blank");
        w.document.write(
          "<html><head><title>Print Barcodes</title></head><body>"
        );
        w.document.body.appendChild(tempDiv);
        w.document.write("</body></html>");
        w.document.close();
        w.focus();
        setTimeout(() => {
          w.print();
          w.close();
        }, 500);
      }

      function resetRunningNumber() {
        if (confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Running Number?")) {
          localStorage.removeItem("currentRunningNumber");
          showToast("‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Running Number ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
        }
      }
      function toggleSidebar() {
        document.getElementById("sidebar").classList.toggle("collapsed");
        document.getElementById("main").classList.toggle("collapsed");
      }

      function showToast(message = "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!") {
        const toast = document.getElementById("toast");
        toast.textContent = message;
        toast.style.display = "block";
        toast.style.opacity = "1";
        setTimeout(() => {
          toast.style.opacity = "0";
          setTimeout(() => {
            toast.style.display = "none";
          }, 500);
        }, 2000);
      }

      document
        .getElementById("fileInput")
        .addEventListener("change", function (e) {
          const reader = new FileReader();
          reader.onload = function (event) {
            const data = new Uint8Array(event.target.result);
            const workbook = XLSX.read(data, { type: "array" });
            const sheet = workbook.Sheets[workbook.SheetNames[0]];
            excelData = XLSX.utils.sheet_to_json(sheet, { defval: "" });

            if (excelData.length > 0) {
              const firstRow = excelData[0];
              const container = document.getElementById("checkboxContainer");
              container.innerHTML = "";
              Object.keys(firstRow).forEach((col) => {
                const checkbox = document.createElement("input");
                checkbox.type = "checkbox";
                checkbox.value = col;
                checkbox.id = "col-" + col;
                checkbox.checked = true;
                checkbox.addEventListener("change", updatePreviewText);
                const label = document.createElement("label");
                label.htmlFor = "col-" + col;
                label.textContent = col;
                const div = document.createElement("div");
                div.appendChild(checkbox);
                div.appendChild(label);
                container.appendChild(div);
              });
              document.getElementById("columnSelector").style.display = "block";
              updatePreviewText();
            }

            document.getElementById("generateBtn").disabled = false;
            showToast("‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
          };
          reader.readAsArrayBuffer(this.files[0]);
        });

      function updatePreviewText() {
        if (!excelData.length) return;

        const selectedColumns = Array.from(
          document.querySelectorAll("#checkboxContainer input:checked")
        ).map((cb) => cb.value);
        const preview = document.getElementById("previewText");
        preview.innerHTML = "";

        excelData.forEach((row, index) => {
          const combinedText = selectedColumns
            .map((col) => (row[col] ? String(row[col]).trim() : ""))
            .filter((val) => val)
            .join(" ")
            .trim();

          if (combinedText) {
            const p = document.createElement("div");
            p.textContent = `${index + 1}. ${combinedText}`;
            p.style.padding = "4px 0";
            preview.appendChild(p);
          }
        });
      }

      function generateBarcodes() {
        if (!excelData.length) return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô!");

        let runningNumber =
          parseInt(localStorage.getItem("currentRunningNumber")) || 1;
        const preview = document.getElementById("preview");
        preview.innerHTML = "";
        generatedBarcodes = [];

        const selectedColumns = Array.from(
          document.querySelectorAll("#checkboxContainer input:checked")
        ).map((cb) => cb.value);

        excelData.forEach((row) => {
          const combinedText = selectedColumns
            .map((col) => (row[col] ? String(row[col]).trim() : ""))
            .filter((val) => val)
            .join(" ")
            .trim();

          if (!combinedText) return;

          const runningNumberStr = runningNumber.toString().padStart(6, "0");
          const finalBarcode = `${combinedText} ${runningNumberStr}`;

          const div = document.createElement("div");
          div.className = "barcode-item";
          const svg = document.createElement("svg");
          JsBarcode(svg, finalBarcode, {
            format: "CODE128",
            width: 2,
            height: 50,
            displayValue: true,
          });
          div.appendChild(svg);
          preview.appendChild(div);

          generatedBarcodes.push(finalBarcode);
          runningNumber++;
        });

        localStorage.setItem("currentRunningNumber", runningNumber);

        saveBarcodeHistory(excelData, generatedBarcodes); // <<=== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        document.getElementById("printBtn").style.display = "inline-block";
        showToast("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß!");
      }

      function printBarcodes() {
        if (!generatedBarcodes.length) {
          alert("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ Generate Barcode ‡∏Ñ‡∏£‡∏±‡∏ö");
          return;
        }

        const tempDiv = document.createElement("div");
        tempDiv.style.padding = "20px";
        tempDiv.style.textAlign = "center";

        generatedBarcodes.forEach((text) => {
          const canvas = document.createElement("canvas");
          JsBarcode(canvas, text, {
            format: "CODE128",
            width: 2,
            height: 50,
            displayValue: true,
          });

          const img = new Image();
          img.src = canvas.toDataURL("image/png");
          img.style.margin = "20px 0";
          img.style.width = "300px";
          tempDiv.appendChild(img);
        });

        const w = window.open("", "_blank");
        w.document.write(
          "<html><head><title>Print Barcodes</title></head><body>"
        );
        w.document.body.appendChild(tempDiv);
        w.document.write("</body></html>");
        w.document.close();
        w.focus();
        setTimeout(() => {
          w.print();
          w.close();
        }, 500);
      }

      function resetRunningNumber() {
        if (confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Running Number?")) {
          localStorage.setItem("currentRunningNumber", 1);
          showToast("‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Running Number ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
        }
      }

      function saveBarcodeHistory(fileData, barcodes) {
        const histories =
          JSON.parse(localStorage.getItem("barcodeHistories")) || [];
        const currentRunning =
          parseInt(localStorage.getItem("currentRunningNumber")) || 1;
        const newHistory = {
          id: Date.now(),
          timestamp: new Date().toLocaleString(),
          fileData: fileData,
          barcodes: barcodes,
          runningStart: currentRunning - barcodes.length,
        };
        histories.push(newHistory);
        localStorage.setItem("barcodeHistories", JSON.stringify(histories));
      }

      function updateCurrentRunningNumberDisplay() {
        const number = localStorage.getItem("currentRunningNumber") || 1;
        document.getElementById("currentRunningNumber").textContent = number
          .toString()
          .padStart(6, "0");
      }

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏ä‡∏ß‡πå‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤
      window.addEventListener("load", () => {
        updateCurrentRunningNumberDisplay();
      });

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏ä‡∏ß‡πå‡∏´‡∏•‡∏±‡∏á reset
      function resetRunningNumber() {
        if (confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Running Number?")) {
          localStorage.setItem("currentRunningNumber", 1);
          showToast("‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Running Number ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
          updateCurrentRunningNumberDisplay(); // <- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏ä‡∏ß‡πå‡πÉ‡∏´‡∏°‡πà
        }
      }

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏ä‡∏ß‡πå‡∏´‡∏•‡∏±‡∏á Generate
      function generateBarcodes() {
        if (!excelData.length) return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô!");

        let runningNumber =
          parseInt(localStorage.getItem("currentRunningNumber")) || 1;
        const preview = document.getElementById("preview");
        preview.innerHTML = "";
        generatedBarcodes = [];

        const selectedColumns = Array.from(
          document.querySelectorAll("#checkboxContainer input:checked")
        ).map((cb) => cb.value);

        excelData.forEach((row) => {
          const combinedText = selectedColumns
            .map((col) => (row[col] ? String(row[col]).trim() : ""))
            .filter((val) => val)
            .join(" ")
            .trim();

          if (!combinedText) return;

          const runningNumberStr = runningNumber.toString().padStart(6, "0");
          const finalBarcode = `${combinedText} ${runningNumberStr}`;

          const div = document.createElement("div");
          div.className = "barcode-item";
          const svg = document.createElement("svg");
          JsBarcode(svg, finalBarcode, {
            format: "CODE128",
            width: 2,
            height: 50,
            displayValue: true,
          });
          div.appendChild(svg);
          preview.appendChild(div);

          generatedBarcodes.push(finalBarcode);
          runningNumber++;
        });

        localStorage.setItem("currentRunningNumber", runningNumber);
        updateCurrentRunningNumberDisplay(); // <- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏ä‡∏ß‡πå‡πÉ‡∏´‡∏°‡πà

        saveBarcodeHistory(excelData, generatedBarcodes);
        document.getElementById("printBtn").style.display = "inline-block";
        showToast("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß!");
      }
    </script>
  </body>
</html>
